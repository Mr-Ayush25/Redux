import { createAsyncThunk, createSlice, nanoid } from "@reduxjs/toolkit";
import axios from "axios";
// import { current } from "immer";
// Sub is used to substarct the time from the time of Date(By default we get ms from Dates)
import { sub } from "date-fns";

const POSTS_URL = "https://jsonplaceholder.typicode.com/posts";

// To fetch  posts
export const fetchPosts = createAsyncThunk("posts/fetchPosts", async () => {
  const response = await axios.get(POSTS_URL);
  return response.data;
});

// To add Post
export const addNewPost = createAsyncThunk(
  "posts/addNewPost",
  async (initialPost) => {
    console.log(initialPost);
    const response = await axios.post(POSTS_URL, initialPost);
    // console.log("from here", response.data);
    return response.data;
  }
);
// Post State
const initialState = {
  posts: [],
  status: "idle", //'idle' | 'loading' | 'succeeded' | 'failed'
  error: null,
};

// Creating a Slice
const postsSlice = createSlice({
  name: "posts", // Name of the slice
  initialState, // Initial state for the slice
  reducers: {
    // A reducer to add a post
    postAdded: {
      reducer(state, action) {
        // Update the state by pushing the new post (action.payload) into the array.
        // Redux Toolkit uses the Immer library behind the scenes for immutability.
        state.push(action.payload);
      },
      prepare(title, content, userId) {
        // This is a prepare function that generates the payload for the postAdded action.
        // It creates a new post object with a unique ID and default values for other fields.
        return {
          payload: {
            id: nanoid(), // Generate a unique ID
            title,
            content,
            date: new Date().toISOString(),
            userId,
            reactions: {
              thumbsUp: 0,
              wow: 0,
              heart: 0,
              rocket: 0,
              coffee: 0,
            },
          },
        };
      },
    },
    reactionAdded(state, action) {
      // console.log(action, current(state)); Extra knowledge we can't see directly value of state but using current we can.
      // This reducer updates the reactions of a post.
      const { postId, reaction } = action.payload;
      // Find the post in the state array with the specified postId.
      const existingPost = state.posts.find((post) => post.id == postId);
      if (existingPost) {
        // If the post exists, increment the specified reaction count.
        existingPost.reactions[reaction]++;
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.status = "succeeded";
        // Adding date and reactions
        let min = 1;
        const loadedPosts = action.payload.map((post) => {
          post.date = sub(new Date(), { minutes: min++ }).toISOString();
          post.reactions = {
            thumbsUp: 0,
            wow: 0,
            heart: 0,
            rocket: 0,
            coffee: 0,
          };
          return post;
        });

        // Add any fetched posts to the array
        // state.posts = state.posts.concat(loadedPosts);
        state.posts = loadedPosts;
      })
      .addCase(fetchPosts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      })
      .addCase(addNewPost.fulfilled, (state, action) => {
        // console.log("action here", action);
        action.payload.userId = Number(action.payload.userId);
        action.payload.date = new Date().toISOString();
        action.payload.reactions = {
          thumbsUp: 0,
          wow: 0,
          heart: 0,
          rocket: 0,
          coffee: 0,
        };
        // console.log(action.payload);
        state.posts.push(action.payload);
      });
  },
});

// Export the selector to get all posts from the state
export const selectAllPosts = (state) => state.posts.posts;
export const getPostsStatus = (state) => state.posts.status;
export const getPostsError = (state) => state.posts.error;

// Export the actions generated by the slice
export const { postAdded, reactionAdded } = postsSlice.actions;

// Export the reducer function generated by the slice
export default postsSlice.reducer;
