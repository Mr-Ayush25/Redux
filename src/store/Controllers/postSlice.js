import { createSlice, nanoid } from "@reduxjs/toolkit";
// Sub is used to substarct the time from the time of Date(By default we get ms from Dates)
import { sub } from "date-fns";

// Post State
const initialState = [
  // Initial array of post objects
  {
    id: "1",
    title: "Learning Redux Toolkit",
    content: "I've heard good things.",
    // Just to showcase we are substracting time.
    date: sub(new Date(), { minutes: 10 }).toISOString(),
    reactions: {
      thumbsUp: 0,
      wow: 0,
      heart: 0,
      rocket: 0,
      coffee: 0,
    },
  },
  {
    id: "2",
    title: "Slices...",
    content: "The more I say slice, the more I want pizza.",
    date: sub(new Date(), { minutes: 5 }).toISOString(),
    reactions: {
      thumbsUp: 0,
      wow: 0,
      heart: 0,
      rocket: 0,
      coffee: 0,
    },
  },
];

// Creating a Slice
const postsSlice = createSlice({
  name: "posts", // Name of the slice
  initialState, // Initial state for the slice
  reducers: {
    // A reducer to add a post
    postAdded: {
      reducer(state, action) {
        // Update the state by pushing the new post (action.payload) into the array.
        // Redux Toolkit uses the Immer library behind the scenes for immutability.
        state.push(action.payload);
      },
      prepare(title, content, userId) {
        // This is a prepare function that generates the payload for the postAdded action.
        // It creates a new post object with a unique ID and default values for other fields.
        return {
          payload: {
            id: nanoid(), // Generate a unique ID
            title,
            content,
            date: new Date().toISOString(),
            userId,
            reactions: {
              thumbsUp: 0,
              wow: 0,
              heart: 0,
              rocket: 0,
              coffee: 0,
            },
          },
        };
      },
    },
    reactionAdded(state, action) {
      // This reducer updates the reactions of a post.
      const { postId, reaction } = action.payload;
      // Find the post in the state array with the specified postId.
      const existingPost = state.find((post) => post.id === postId);
      if (existingPost) {
        // If the post exists, increment the specified reaction count.
        existingPost.reactions[reaction]++;
      }
    },
  },
});

// Export the selector to get all posts from the state
export const selectAllPosts = (state) => state.posts;

// Export the actions generated by the slice
export const { postAdded, reactionAdded } = postsSlice.actions;

// Export the reducer function generated by the slice
export default postsSlice.reducer;
